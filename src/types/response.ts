/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Auto-generated by https://app.quicktype.io/
 * From the response schema.json, which is from https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#get-a-pull-request
 * That's why eslint is disabled for this file.
 */
/* eslint-disable */

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub.
 * Once a pull request is sent, interested parties can review the set of changes, discuss
 * potential modifications, and even push follow-up commits if necessary.
 */
export interface PullRequestResponseSchema {
  _links: Links;
  active_lock_reason?: null | string;
  additions: number;
  assignee: null | PurpleSimpleUser;
  assignees?: AssigneeElement[] | null;
  /**
   * How the author is associated with the repository.
   */
  author_association: AuthorAssociation;
  /**
   * The status of auto merging a pull request.
   */
  auto_merge: null | AutoMerge;
  base: Base;
  body: null | string;
  changed_files: number;
  closed_at: Date | null;
  comments: number;
  comments_url: string;
  commits: number;
  commits_url: string;
  created_at: Date;
  deletions: number;
  diff_url: string;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
  head: Head;
  html_url: string;
  id: number;
  issue_url: string;
  labels: Label[];
  locked: boolean;
  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify: boolean;
  merge_commit_sha: null | string;
  mergeable: boolean | null;
  mergeable_state: string;
  merged: boolean;
  merged_at: Date | null;
  merged_by: null | FluffySimpleUser;
  milestone: null | Milestone;
  node_id: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number: number;
  patch_url: string;
  rebaseable?: boolean | null;
  requested_reviewers?: RequestedReviewerElement[] | null;
  requested_teams?: TeamSimple[] | null;
  review_comment_url: string;
  review_comments: number;
  review_comments_url: string;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state: State;
  statuses_url: string;
  /**
   * The title of the pull request.
   */
  title: string;
  updated_at: Date;
  url: string;
  /**
   * A GitHub user.
   */
  user: UserObject;
  [property: string]: any;
}

export interface Links {
  /**
   * Hypermedia Link
   */
  comments: CommentsObject;
  /**
   * Hypermedia Link
   */
  commits: CommitsObject;
  /**
   * Hypermedia Link
   */
  html: HTMLObject;
  /**
   * Hypermedia Link
   */
  issue: IssueObject;
  /**
   * Hypermedia Link
   */
  review_comment: ReviewCommentObject;
  /**
   * Hypermedia Link
   */
  review_comments: ReviewCommentsObject;
  /**
   * Hypermedia Link
   */
  self: SelfObject;
  /**
   * Hypermedia Link
   */
  statuses: StatusesObject;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface CommentsObject {
  href: string;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface CommitsObject {
  href: string;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface HTMLObject {
  href: string;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface IssueObject {
  href: string;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface ReviewCommentObject {
  href: string;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface ReviewCommentsObject {
  href: string;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface SelfObject {
  href: string;
  [property: string]: any;
}

/**
 * Hypermedia Link
 */
export interface StatusesObject {
  href: string;
  [property: string]: any;
}

/**
 * A GitHub user.
 */
export interface PurpleSimpleUser {
  avatar_url: string;
  email?: null | string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  name?: null | string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

/**
 * A GitHub user.
 */
export interface AssigneeElement {
  avatar_url: string;
  email?: null | string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  name?: null | string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

/**
 * How the author is associated with the repository.
 */
export enum AuthorAssociation {
  Collaborator = 'COLLABORATOR',
  Contributor = 'CONTRIBUTOR',
  FirstTimeContributor = 'FIRST_TIME_CONTRIBUTOR',
  FirstTimer = 'FIRST_TIMER',
  Mannequin = 'MANNEQUIN',
  Member = 'MEMBER',
  None = 'NONE',
  Owner = 'OWNER',
}

export interface AutoMerge {
  /**
   * Commit message for the merge commit.
   */
  commit_message: string;
  /**
   * Title for the merge commit message.
   */
  commit_title: string;
  /**
   * A GitHub user.
   */
  enabled_by: EnabledByObject;
  /**
   * The merge method to use.
   */
  merge_method: MergeMethod;
  [property: string]: any;
}

/**
 * A GitHub user.
 */
export interface EnabledByObject {
  avatar_url: string;
  email?: null | string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  name?: null | string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

/**
 * The merge method to use.
 */
export enum MergeMethod {
  Merge = 'merge',
  Rebase = 'rebase',
  Squash = 'squash',
}

export interface Base {
  label: string;
  ref: string;
  repo: BaseRepo;
  sha: string;
  user: BaseUser;
  [property: string]: any;
}

export interface BaseRepo {
  allow_forking?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at: Date;
  default_branch: string;
  deployments_url: string;
  description: null | string;
  disabled: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_discussions: boolean;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  homepage: null | string;
  hooks_url: string;
  html_url: string;
  id: number;
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: null | string;
  languages_url: string;
  license: null | LicenseSimple;
  master_branch?: string;
  merges_url: string;
  milestones_url: string;
  mirror_url: null | string;
  name: string;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  owner: PurpleOwner;
  permissions?: PurplePermissions;
  private: boolean;
  pulls_url: string;
  pushed_at: Date;
  releases_url: string;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  svn_url: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  topics?: string[];
  trees_url: string;
  updated_at: Date;
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  web_commit_signoff_required?: boolean;
  [property: string]: any;
}

/**
 * License Simple
 */
export interface LicenseSimple {
  html_url?: string;
  key: string;
  name: string;
  node_id: string;
  spdx_id: null | string;
  url: null | string;
  [property: string]: any;
}

export interface PurpleOwner {
  avatar_url: string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

export interface PurplePermissions {
  admin: boolean;
  maintain?: boolean;
  pull: boolean;
  push: boolean;
  triage?: boolean;
  [property: string]: any;
}

export interface BaseUser {
  avatar_url: string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

export interface Head {
  label: string;
  ref: string;
  repo: null | HeadRepo;
  sha: string;
  user: HeadUser;
  [property: string]: any;
}

export interface HeadRepo {
  allow_forking?: boolean;
  allow_merge_commit?: boolean;
  allow_rebase_merge?: boolean;
  allow_squash_merge?: boolean;
  archive_url: string;
  archived: boolean;
  assignees_url: string;
  blobs_url: string;
  branches_url: string;
  clone_url: string;
  collaborators_url: string;
  comments_url: string;
  commits_url: string;
  compare_url: string;
  contents_url: string;
  contributors_url: string;
  created_at: Date;
  default_branch: string;
  deployments_url: string;
  description: null | string;
  disabled: boolean;
  downloads_url: string;
  events_url: string;
  fork: boolean;
  forks: number;
  forks_count: number;
  forks_url: string;
  full_name: string;
  git_commits_url: string;
  git_refs_url: string;
  git_tags_url: string;
  git_url: string;
  has_discussions: boolean;
  has_downloads: boolean;
  has_issues: boolean;
  has_pages: boolean;
  has_projects: boolean;
  has_wiki: boolean;
  homepage: null | string;
  hooks_url: string;
  html_url: string;
  id: number;
  is_template?: boolean;
  issue_comment_url: string;
  issue_events_url: string;
  issues_url: string;
  keys_url: string;
  labels_url: string;
  language: null | string;
  languages_url: string;
  license: null | License;
  master_branch?: string;
  merges_url: string;
  milestones_url: string;
  mirror_url: null | string;
  name: string;
  node_id: string;
  notifications_url: string;
  open_issues: number;
  open_issues_count: number;
  owner: FluffyOwner;
  permissions?: FluffyPermissions;
  private: boolean;
  pulls_url: string;
  pushed_at: Date;
  releases_url: string;
  size: number;
  ssh_url: string;
  stargazers_count: number;
  stargazers_url: string;
  statuses_url: string;
  subscribers_url: string;
  subscription_url: string;
  svn_url: string;
  tags_url: string;
  teams_url: string;
  temp_clone_token?: string;
  topics?: string[];
  trees_url: string;
  updated_at: Date;
  url: string;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  watchers: number;
  watchers_count: number;
  web_commit_signoff_required?: boolean;
  [property: string]: any;
}

export interface License {
  key: string;
  name: string;
  node_id: string;
  spdx_id: null | string;
  url: null | string;
  [property: string]: any;
}

export interface FluffyOwner {
  avatar_url: string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

export interface FluffyPermissions {
  admin: boolean;
  maintain?: boolean;
  pull: boolean;
  push: boolean;
  triage?: boolean;
  [property: string]: any;
}

export interface HeadUser {
  avatar_url: string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

export interface Label {
  color: string;
  default: boolean;
  description: null | string;
  id: number;
  name: string;
  node_id: string;
  url: string;
  [property: string]: any;
}

/**
 * A GitHub user.
 */
export interface FluffySimpleUser {
  avatar_url: string;
  email?: null | string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  name?: null | string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  closed_at: Date | null;
  closed_issues: number;
  created_at: Date;
  creator: null | MilestoneSimpleUser;
  description: null | string;
  due_on: Date | null;
  html_url: string;
  id: number;
  labels_url: string;
  node_id: string;
  /**
   * The number of the milestone.
   */
  number: number;
  open_issues: number;
  /**
   * The state of the milestone.
   */
  state: State;
  /**
   * The title of the milestone.
   */
  title: string;
  updated_at: Date;
  url: string;
  [property: string]: any;
}

/**
 * A GitHub user.
 */
export interface MilestoneSimpleUser {
  avatar_url: string;
  email?: null | string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  name?: null | string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

/**
 * The state of the milestone.
 *
 * State of this Pull Request. Either `open` or `closed`.
 */
export enum State {
  Closed = 'closed',
  Open = 'open',
}

/**
 * A GitHub user.
 */
export interface RequestedReviewerElement {
  avatar_url: string;
  email?: null | string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  name?: null | string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Description of the team
   */
  description: null | string;
  html_url: string;
  /**
   * Unique identifier of the team
   */
  id: number;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  node_id: string;
  /**
   * The notification setting the team has set
   */
  notification_setting?: string;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  repositories_url: string;
  slug: string;
  /**
   * URL for the team
   */
  url: string;
  [property: string]: any;
}

/**
 * A GitHub user.
 */
export interface UserObject {
  avatar_url: string;
  email?: null | string;
  events_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  gravatar_id: null | string;
  html_url: string;
  id: number;
  login: string;
  name?: null | string;
  node_id: string;
  organizations_url: string;
  received_events_url: string;
  repos_url: string;
  site_admin: boolean;
  starred_at?: string;
  starred_url: string;
  subscriptions_url: string;
  type: string;
  url: string;
  [property: string]: any;
}
